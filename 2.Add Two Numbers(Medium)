Description:
You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4) Output: 7 -> 0 -> 8


(1)	time:O(max(m,n)) space:O(max(m,n))
//use array to save res and restore in linkedlist

public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
	final int RANGE=40;
	int[] ans =new int[RANGE];
	int i;
	
	i=0;
	while(l1!=null)
	{
		ans[i++]=l1.val;
		l1=l1.next;
	}
	
	i=0;
	while(l2!=null)
	{
		if(ans[i]+l2.val>=10)
		{
			int tmp=ans[i]+l2.val;
			ans[i]=tmp%10;
			prcCarry(ans,i+1,1);
		}
		else
		{
			ans[i++]+=l2.val;
		}
		l2=l2.next;
	}
        
	ListNode l=new ListNode(ans[0]);
	ListNode p=l;
	int max=0;
	for(i=0;i<RANGE;++i)
	{
		if(ans[i]!=0)
			max=i;
	}
	for(i=1;i<=max;++i)
	{
		ListNode tmp=new ListNode(ans[i]);
		p.next=tmp;
		p=tmp;
	}
	
	
	return l;
}
    
private static void prcCarry(int[] ans, int pos, int num) {
	// TODO Auto-generated method stub
	ans[pos]+=num;
	while(ans[pos]>=10)
	{
		ans[pos++]%=10;    		
ans[pos]+=1;
	}
}


(2)	time:O(max(m,n)) space:O(1)
//one pass with original space

public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
	ListNode head = l1;
	ListNode pre1 = l1,pre2 = l2,p1 =l1.next,p2=l2.next;
	head.val += pre2.val;
	while(p1!=null && p2!=null)
	{
		p1.val += pre1.val/10+p2.val;
		pre1.val = pre1.val%10;
		pre1 = p1;
		pre2 = p2;
		p1 = p1.next;
		p2 = p2.next;		
	}
	
	if(p1 == null && p2!=null)
	{
		p1 = p2;
		pre1.next = p2;
	}
	while(p1!=null)
	{
		p1.val += pre1.val/10;
		pre1.val = pre1.val%10;
		pre1 = p1;
		p1 = p1.next;		
	}
	
	if(pre1.val>=10)
	{
		ListNode l = new ListNode(1);
		pre1.val = pre1.val-10;
		pre1.next = l;
	}

	return head;
}
